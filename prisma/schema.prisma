// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// model Example {
//    id        String   @id @default(cuid())
//    name      String
//    createdAt DateTime @default(now())
//    updatedAt DateTime @updatedAt
//}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resident {
  id              String   @id @default(cuid())
  nationalId      Int   @unique @map("national_id")
  name            String   @map("name")
  gender          String
  address         String   @map("address")
  apartment       Apartment @relation(fields: [floorNo, apartmentNo], references: [floorNo, apartmentNo])
  floorNo         Int
  apartmentNo     Int
  createAt        DateTime @default(now()) @map("create_at")
  updateAt        DateTime @default(now()) @updatedAt @map("update_at")
}
model Apartment {
  id              Int      @id @default(autoincrement())
  floorNo         Int
  apartmentNo     Int
  residents Resident[]
  @@unique([floorNo, apartmentNo])
}
model Fee {
  id              String    @id @default(cuid())
  type            String
  amount          Float
  dueDate         DateTime
  isPaid          Boolean   @default(false)
  apartment       Apartment @relation(fields: [floorNo, apartmentNo], references: [floorNo, apartmentNo])
  floorNo         Int
  apartmentNo     Int
  resident        Resident? @relation(fields: [residentId], references: [id])
  residentId      String?
  @@index([residentId])
  createAt        DateTime  @default(now()) @map("create_at")
  updateAt        DateTime  @default(now()) @updatedAt @map("update_at")
}